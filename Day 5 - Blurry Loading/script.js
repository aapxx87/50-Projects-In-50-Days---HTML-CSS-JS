// Step 3

// Selectors
const loadText = document.querySelector('.loading-text')
const bg = document.querySelector('.bg')


// Starting conditions

// 3.1 - инициализируем стартовое условие лоадера через переменную
let load = 0;

// 3.2 - задаем интервал с которым будет увеличваться (накручиваться) значение лоадера, тоже через переменную - используем для этого функцию setinteval(), которая принимает то что будем увеличивать и вторым аргументом через сколько милисекуд
let int = setInterval(blurring, 30)



// 3.3 - создаем функцию blurring
function blurring() {

  // увеличиваем стартовое значение лоадера на 1
  load++

  // но при текущих параметрах это значение будет увеличиваться бесконечно, нам нужно остановиться на 100, поэтому добавляем условие и функцию clearInterval(), в которую передаем в качестве аргумента переменную с интервалом
  if (load > 99) {
    clearInterval(int)
  }


  // нам нужно вставлять значение load в dom элементм в место счетчика
  loadText.innerText = `${load}%`

  // мы хотим сделать так, чтобы по мере приближения лоадера к значению 100% он становился целиком прозрачным, делаем это через назначение соответтсвующего свойства css
  // нам нужно чтобы значение менялось от 1 к 0, то есть 1 целиком видно, 0 совсем не видно
  // метод map берем из stackoverflow, который позволяет устанвливать счетчики с различными направлениями
  // мы вставляем сначала значение load от 0 (мин) до 100 (макс), указываем что нам нужно в opacity соответствовать мин 1 макс 0
  loadText.style.opacity = scale(load, 0, 100, 1, 0)

  // реализуем наалогичную функцию и для blur
  bg.style.filter = `blur(${scale(load, 0, 100, 30, 0)}px)`

}


// https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers
// функция для переворачивания аналгов счетчиков из одниз начений в дургие
const scale = (num, in_min, in_max, out_min, out_max) => {
  return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min
}






















// а
